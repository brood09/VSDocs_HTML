@import '_config.less';
@import '_transitions.less';

.transition(@property: all){
	-webkit-transition+: @property .25s ease;
	   -moz-transition+: @property .25s ease;
	    -ms-transition+: @property .25s ease;
	     -o-transition+: @property .25s ease;
	        transition+: @property .25s ease;
}

.transition-custom(...){
	@values: ~`"@{arguments}".replace(/[\[\]]/g, '')`;
	-webkit-transition: @values;
	   -moz-transition: @values;
	    -ms-transition: @values;
	     -o-transition: @values;
	        transition: @values;
}


.fz( @value: @font-size_base, @context: @font-size_base ) {
	font-size: (@value / @context) + 0em;
}

.translateX(@value){
	-webkit-transform: translateX(@value);
	   -moz-transform: translateX(@value);
	    -ms-transform: translateX(@value);
	     -o-transform: translateX(@value);
	        transform: translateX(@value);
}

.animation(@arguments) {
	-webkit-animation: @arguments;
	   -moz-animation: @arguments;
	    -ms-animation: @arguments;
	     -o-animation: @arguments;
	        animation: @arguments;
}

.transform(@value){
	-webkit-transform+_: @value;
	   -moz-transform+_: @value;
	    -ms-transform+_: @value;
	     -o-transform+_: @value;
	        transform+_: @value;
}

.keyframes(@name; @arguments) {
	@-moz-keyframes @name { @arguments(); }
	@-webkit-keyframes @name { @arguments(); }
	@keyframes @name { @arguments(); }
}

//Clearfix
.clearfix() {
	&:before, &:after {content: ''; display: table;}
	&:after {clear: both;}
}

//Transform Origin
.transform-origin(@transform: 50% 50%) {
	-webkit-transform-origin: @transform;
	-moz-transform-origin: @transform;
	-o-transform-origin: @transform;
	-ms-transform-origin: @transform;
	transform-origin: @transform;
}

//Transform Perspective
.perspective(@perspective: 500px) {
	-webkit-perspective: @perspective;
	-moz-perspective: @perspective;
	-o-perspective: @perspective;
	-ms-perspective: @perspective;
	perspective: @perspective;
}

//Transform Style
.transform-style(@transform: preserve-3d) {
	-webkit-transform-style: @transform;
	-moz-transform-style: @transform;
	-o-transform-style: @transform;
	-ms-transform-style: @transform;
	transform-style: @transform;
}

//Backface Visibility
.backface-visibility(@backface: hidden) {
	-webkit-backface-visibility: @backface;
	-moz-backface-visibility: @backface;
	-o-backface-visibility: @backface;
	-ms-backface-visibility: @backface;
	backface-visibility: @backface;
}

//Box Shadow
.box-shadow(@box-shadow: 0 0 4px rgba(0,0,0,.26)) {
	-webkit-box-shadow+: @box-shadow;
	-moz-box-shadow+: @box-shadow;
	box-shadow+: @box-shadow;
}

//Border Radius
.border-radius(@border-radius: 4px) {
	-webkit-border-radius: @border-radius;
	-moz-border-radius: @border-radius;
	border-radius: @border-radius;
}

//Background Size
.background-size(@background-size: cover) {
	-webkit-background-size: @background-size;
	-moz-background-size: @background-size;
	-o-background-size: @background-size;
	-ms-background-size: @background-size;
	background-size: @background-size;
	background-position: center top;
	background-repeat: no-repeat;
}

//Placeholders
.placeholder(@placeholder-font-size: 14px, @placeholder-font-weight: 400, @placeholder-font-color: #ccc) {
	&::-webkit-input-placeholder  {font-size: @placeholder-font-size; font-weight: @placeholder-font-weight; color: @placeholder-font-color;}
	&:-moz-placeholder            {font-size: @placeholder-font-size; font-weight: @placeholder-font-weight; color: @placeholder-font-color;}
	&::-moz-placeholder           {font-size: @placeholder-font-size; font-weight: @placeholder-font-weight; color: @placeholder-font-color;}
	&:-ms-input-placeholder       {font-size: @placeholder-font-size; font-weight: @placeholder-font-weight; color: @placeholder-font-color;}
}

//Input Appearance
.appearance(@appearance: none) {
	-webkit-appearance: @appearance;
	-moz-appearance: @appearance;
	appearance: @appearance;
}

//User Select
.user-select(@user-select: none) {
	-webkit-user-select: @user-select;
	-moz-user-select: @user-select;
	-ms-user-select: @user-select;
	user-select: @user-select;
}

// Sizing shortcuts
.size(@width, @height: @width) {
	width: @width;
	height: @height;
}
.square(@size) {
	.size(@size, @size);
}

// Retina Images
.retina(@bg-image, @bg-size, @bg-size-vertical: auto) {
	@media  (-webkit-min-device-pixel-ratio: 1.5),
	(min-resolution: 1.5dppx),
	(min-resolution: 144dpi) {
		background-image: url(@bg-image);
		.background-size(@bg-size @bg-size-vertical);
	}
}

// Linear Gradient
.gradient(@gradient, @gradient-bottom: darken(@gradient, 15%)) {
	background: @gradient;
	background: -moz-linear-gradient(top, @gradient 0%, @gradient-bottom 100%);
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,@gradient), color-stop(100%,@gradient-bottom));
	background: -webkit-linear-gradient(top,  @gradient 0%, @gradient-bottom 100%);
	background: -o-linear-gradient(top,  @gradient 0%, @gradient-bottom 100%);
	background: -ms-linear-gradient(top,  @gradient 0%, @gradient-bottom 100%);
	background: linear-gradient(to bottom,  @gradient 0%, @gradient-bottom 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{gradient}', endColorstr='@{gradient-bottom}',GradientType=0 );
	.ie9 & {filter: none;}
}

// Linear Gradient with 3 points
.gradient3points(@gradient-top, @gradient: @gradient-top, @percentage: 50%, @gradient-bottom: darken(@gradient, 15%)) {
	background: @gradient;
	background: -moz-linear-gradient(top, @gradient-top 0%, @gradient @percentage,  @gradient-bottom 100%);
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,@gradient-top), color-stop(@percentage,@gradient), color-stop(100%,@gradient-bottom));
	background: -webkit-linear-gradient(top,  @gradient-top 0%,@gradient @percentage,@gradient-bottom 100%);
	background: -o-linear-gradient(top,  @gradient-top 0%,@gradient @percentage,@gradient-bottom 100%);
	background: -ms-linear-gradient(top,  @gradient-top 0%,@gradient @percentage,@gradient-bottom 100%);
	background: linear-gradient(to bottom,  @gradient-top 0%,@gradient @percentage,@gradient-bottom 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{gradient-top}', endColorstr='@{gradient-bottom}',GradientType=0 );
	.ie9 & {filter: none;}
}

// Gradient Horizontal
.gradient-horizontal(@gradient, @gradient-right: darken(@gradient, 15%)) {
	background: @gradient;
	background: -moz-linear-gradient(left, @gradient 0%, @gradient-right 100%);
	background: -webkit-gradient(linear, left top, right top, color-stop(0%,@gradient), color-stop(100%,@gradient-right));
	background: -webkit-linear-gradient(left,  @gradient 0%, @gradient-right 100%);
	background: -o-linear-gradient(left,  @gradient 0%, @gradient-right 100%);
	background: -ms-linear-gradient(left,  @gradient 0%, @gradient-right 100%);
	background: linear-gradient(to right,  @gradient 0%, @gradient-right 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{gradient}', endColorstr='@{gradient-right}',GradientType=1 );
	.ie9 & {filter: none;}
}

// Opacity
.opacity(@opacity: .5) {
	-webkit-opacity: @opacity;
	-moz-opacity: @opacity;
	opacity: @opacity;
	@opperc: @opacity * 100;
	-ms-filter: ~"progid:DXImageTransform.Microsoft.Alpha(opacity=@{opperc})";
	filter: ~"alpha(opacity=@{opperc})";
}

// Blur
.blur(@radius: 2) {
	-webkit-filter: blur(@radius + 0px);
	-moz-filter: blur(@radius + 0px);
	-ms-filter: blur(@radius + 0px);
	filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='blur'><feGaussianBlur stdDeviation='@{radius}'/></filter></svg>#blur");
	filter: blur(@radius + 0px);
	filter: progid:DXImageTransform.Microsoft.Blur(pixelRadius=@radius);
}

// Background-clip
.background-clip(@clip: content-box) {
	-webkit-background-clip: @clip;
	-moz-background-clip: @clip;
	background-clip: @clip;
}

// Ellipsis
.ellipsis() {
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
}

// Position Absolute, Container Cover
.absolute(@offset: 0) {
	position: absolute;
	top: @offset;
	left: @offset;
	right: @offset;
	bottom: @offset;
}














